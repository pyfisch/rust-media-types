var searchIndex = {};
searchIndex['media_types'] = {"items":[[0,"","media_types","Media Types also known as MIME types describe the nature of data they are\nused in email to describe the file type of attachments and in HTTP to to\ngive\nthe type of a resource.",null,null],[11,"eq","charsets","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"charset"}],"output":{"name":"charset"}}],[11,"fmt","","",1,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"charset"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[4,"Charset","media_types","A Mime charset.",null,null],[13,"UsAscii","","US ASCII",1,null],[13,"Iso88591","","ISO-8859-1",1,null],[13,"Iso88592","","ISO-8859-2",1,null],[13,"Iso88593","","ISO-8859-3",1,null],[13,"Iso88594","","ISO-8859-4",1,null],[13,"Iso88595","","ISO-8859-5",1,null],[13,"Iso88596","","ISO-8859-6",1,null],[13,"Iso88597","","ISO-8859-7",1,null],[13,"Iso88598","","ISO-8859-8",1,null],[13,"Iso88599","","ISO-8859-9",1,null],[13,"Iso885910","","ISO-8859-10",1,null],[13,"ShiftJis","","Shift_JIS",1,null],[13,"EucJp","","EUC-JP",1,null],[13,"Iso2022Kr","","ISO-2022-KR",1,null],[13,"EucKr","","EUC-KR",1,null],[13,"Iso2022Jp","","ISO-2022-JP",1,null],[13,"Iso2022Jp2","","ISO-2022-JP-2",1,null],[13,"Iso88596E","","ISO-8859-6-E",1,null],[13,"Iso88596I","","ISO-8859-6-I",1,null],[13,"Iso88598E","","ISO-8859-8-E",1,null],[13,"Iso88598I","","ISO-8859-8-I",1,null],[13,"Gb2312","","GB2312",1,null],[13,"Big5","","Big5",1,null],[13,"Koi8R","","KOI8-R",1,null],[13,"Utf8","","UTF-8",1,null],[13,"Unregistered","","An arbitrary charset specified as a string",1,null],[3,"MediaType","","A Media Type commonly used to describe the contents of a resource.",null,null],[12,"type_","","The top-level type or `None` to match all types.",2,null],[12,"subtype","","A subtype describing the concrete file format. The first element of the tuple is the\nregistration tree, it describes if they are registered by a standards organization,\na vendor, or if they are only for private use. The second tuple element is the subtype,\nit describes the resource. The last part is the suffix it tells how the file was encoded\ncommon values are \"xml\" and \"json\".",2,null],[12,"parameters","","Media types can contain optional parameters for example for charsets or video codes.",2,null],[4,"Error","","Defines an Error type for media types.",null,null],[13,"Invalid","","Parsing the given string as a media type failed.",3,null],[13,"NotFound","","The media type does not have this parameter.",3,null],[13,"Utf8Error","","Decoding a string as UTF-8 (or ASCII) failed.",3,null],[4,"Type","","Provides the six discrete and the two composite top-level media types.",null,null],[13,"Text","","The \"text\" top-level type is intended for sending material that is\nprincipally textual in form.",4,null],[13,"Image","","A top-level type of \"image\" indicates that the content specifies one\nor more individual images.",4,null],[13,"Audio","","A top-level type of \"audio\" indicates that the content contains audio data.",4,null],[13,"Video","","A top-level type of \"video\" indicates that the content specifies a\ntime-varying-picture image, possibly with color and coordinated sound.",4,null],[13,"Application","","The \"application\" top-level type is to be used for discrete data that\ndo not fit under any of the other type names, and particularly for\ndata to be processed by some type of application program.",4,null],[13,"Multipart","","The \"multipart\" top-level type is to be used for data consisting of multiple\nentities of independent data types.",4,null],[13,"Message","","A body of media type \"message\" is itself all or a portion of some\nkind of message object.",4,null],[13,"Model","","The \"model\" media type is used for 3D-models.",4,null],[13,"Unregistered","","Less common top-level types.",4,null],[4,"Tree","","Provides the four registration trees.",null,null],[13,"Standards","","The standards tree is intended for types of general interest to the Internet community.",5,null],[13,"Vendor","","The vendor tree is used for media types associated with publicly available products.",5,null],[13,"Personal","","Registrations for media types created experimentally or as part of\nproducts that are not distributed commercially may be registered in\nthe personal or vanity tree.",5,null],[13,"Private","","Subtype names with \"x.\" as the first facet may be used for types intended exclusively for\nuse in private, local environments.",5,null],[13,"Unregistered","","Other unofficial trees.",5,null],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"description","","",3,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"error"},{"name":"fromutf8error"}],"output":{"name":"error"}}],[6,"Result","","Result type used for this library.",null,null],[11,"eq","","",2,{"inputs":[{"name":"mediatype"},{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"mediatype"},{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"mediatype"}}],[11,"fmt","","",2,{"inputs":[{"name":"mediatype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"mediatype"}}],[11,"eq","","",4,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"fmt","","",4,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"tree"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"tree"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"tree"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"tree"}],"output":{"name":"tree"}}],[11,"fmt","","",5,{"inputs":[{"name":"tree"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"wildcard","","Creates the wildcard media type `*/*`.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"mediatype"}}],[11,"wildcard_subtype","","Creates a media type with only a concrete type and no subtype like `image/*`.",2,{"inputs":[{"name":"mediatype"},{"name":"type"}],"output":{"name":"mediatype"}}],[11,"new","","Creates a new media type.",2,{"inputs":[{"name":"mediatype"},{"name":"type"},{"name":"tree"},{"name":"a"}],"output":{"name":"mediatype"}}],[11,"new_with_suffix","","Creates a new media type with suffix.",2,{"inputs":[{"name":"mediatype"},{"name":"type"},{"name":"tree"},{"name":"a"},{"name":"b"}],"output":{"name":"mediatype"}}],[11,"tree","","Accesses the tree component of the subtype.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"option"}}],[11,"sub","","Accesses the sub component of the subtype containing the resource type.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"option"}}],[11,"suffix","","Accesses the suffix of the type.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"option"}}],[11,"boundary","","The boundary parameter is used to separate different blocks of multipart resources.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"result"}}],[11,"charset","","The charset parameter is defined for `text/*` types, it carries information about the\ncharset.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"result"}}],[11,"set_charset","","Sets the charset parameter to the given charset and returns the old value if present.",2,{"inputs":[{"name":"mediatype"},{"name":"charset"}],"output":{"name":"option"}}],[11,"set_charset_utf8","","Sets the charset to UTF-8.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"option"}}],[11,"eq_mime_portion","","Compares the mime type portion (the media type without parameters) of two media types.",2,{"inputs":[{"name":"mediatype"},{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"ne_mime_portion","","Returns true if the mime type portions differ, strict inverse of `eq_mime_portion()`.",2,{"inputs":[{"name":"mediatype"},{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"is_image_type","","Checks if the media type is an image type.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"is_audio_or_video_type","","Checks if the media type is an audio or video type.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"is_font_type","","Checks if the media type is a font type.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"is_zip_based_type","","Checks if the media type is a zip based type.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"is_archive_type","","Checks if the media type is an archive type.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"is_xml_type","","Checks if the media type is an XML type.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"is_scriptable_mime_type","","Checks if the media type is a scriptable type, HTML or PDF.",2,{"inputs":[{"name":"mediatype"}],"output":{"name":"bool"}}],[11,"from_str","","",2,{"inputs":[{"name":"mediatype"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"mediatype"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[4,"Charset"],[3,"MediaType"],[4,"Error"],[4,"Type"],[4,"Tree"]]};
searchIndex['charsets'] = {"items":[[0,"","charsets","The crate provides an enum representing all charset names used in Media Types\nand HTTP header values. The list can be found at [the IANA Character Sets\nregistry](http://www.iana.org/assignments/character-sets/character-sets.xhtml).",null,null],[4,"Error","","An error type used for this crate.",null,null],[13,"Invalid","","Parsing as as charset failed.",0,null],[4,"Charset","","A Mime charset.",null,null],[13,"UsAscii","","US ASCII",1,null],[13,"Iso88591","","ISO-8859-1",1,null],[13,"Iso88592","","ISO-8859-2",1,null],[13,"Iso88593","","ISO-8859-3",1,null],[13,"Iso88594","","ISO-8859-4",1,null],[13,"Iso88595","","ISO-8859-5",1,null],[13,"Iso88596","","ISO-8859-6",1,null],[13,"Iso88597","","ISO-8859-7",1,null],[13,"Iso88598","","ISO-8859-8",1,null],[13,"Iso88599","","ISO-8859-9",1,null],[13,"Iso885910","","ISO-8859-10",1,null],[13,"ShiftJis","","Shift_JIS",1,null],[13,"EucJp","","EUC-JP",1,null],[13,"Iso2022Kr","","ISO-2022-KR",1,null],[13,"EucKr","","EUC-KR",1,null],[13,"Iso2022Jp","","ISO-2022-JP",1,null],[13,"Iso2022Jp2","","ISO-2022-JP-2",1,null],[13,"Iso88596E","","ISO-8859-6-E",1,null],[13,"Iso88596I","","ISO-8859-6-I",1,null],[13,"Iso88598E","","ISO-8859-8-E",1,null],[13,"Iso88598I","","ISO-8859-8-I",1,null],[13,"Gb2312","","GB2312",1,null],[13,"Big5","","Big5",1,null],[13,"Koi8R","","KOI8-R",1,null],[13,"Utf8","","UTF-8",1,null],[13,"Unregistered","","An arbitrary charset specified as a string",1,null],[6,"Result","","Result type used for this library.",null,null],[11,"eq","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"charset"}],"output":{"name":"charset"}}],[11,"fmt","","",1,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"charset"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"charset"},{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[4,"Charset"]]};
initSearch(searchIndex);
